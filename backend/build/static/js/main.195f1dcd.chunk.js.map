{"version":3,"sources":["components/images/musicCatalystLogo.png","components/User.js","components/InputField.js","components/SubmitButton.js","LoginForum.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","extendObservable","this","loading","isLoggedIn","username","InputField","className","type","props","placeholder","value","onChange","e","target","React","Component","submitButton","disabled","onClick","text","LoginForum","state","password","item1","item2","item3","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","User","array1","arr","lengthOf","i","document","getElementById","innerHTML","resetForm","alert","msg","console","log","style","textAlign","color","fontSize","fontFamily","fontWeight","setInputValue","SubmitButton","doLogin","doRegister","App","htmlDisplay","inputVal1","inputVal2","inputVal3","display","fontStyle","doLogout","class","doClear","openForm","src","require","alt","id","required","doSubmit","closeForm","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.195f1dcd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/musicCatalystLogo.fe7ee603.png\";","import { extendObservable } from \"mobx\";\r\n\r\nclass User {\r\n    constructor()\r\n    {\r\n        extendObservable(this, {\r\n            \r\n            loading:true,\r\n            isLoggedIn: false,\r\n            username: \"\"\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport default new User();","import React from 'react';\r\n\r\nclass InputField extends React.Component {\r\n  render()\r\n  {\r\n  return (\r\n    <div className=\"input\">\r\n      <input\r\n      className=\"input\"\r\n      type={this.props.type}\r\n      placeholder={this.props.placeholder}\r\n      value={this.props.value}\r\n      onChange={(e)=>this.props.onChange(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default InputField;\r\n","import React from 'react';\r\n\r\nclass submitButton extends React.Component {\r\n  render()\r\n  {\r\n  return (\r\n    <div className=\"subButton\">\r\n    <button\r\n      className=\"btn\"\r\n      disabled={this.props.disabled}\r\n      onClick={()=>this.props.onClick()}\r\n    >\r\n    {this.props.text}\r\n    </button>\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default submitButton;\r\n","import React from 'react';\r\nimport InputField from \"./components/InputField.js\"\r\nimport SubmitButton from \"./components/SubmitButton\";\r\nimport User from \"./components/User\"\r\nimport axios from \"axios\";\r\n\r\nclass LoginForum extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n      item1: \"\",\r\n      item2: \"\",\r\n      item3: \"\",\r\n      buttonDisabled: false\r\n    }\r\n  }\r\n\r\n  setInputValue(property, val) {\r\n    val = val.trim();\r\n    if (val.length > 12) {\r\n      return;\r\n    }\r\n    this.setState({\r\n      [property]: val\r\n    })\r\n  }\r\n\r\n  resetForm() {\r\n    this.setState({\r\n      username: \"\",\r\n      password: \"\",\r\n      buttonDisabled: false\r\n    })\r\n  }\r\n\r\n  async doLogin() {\r\n    if (!this.state.username) {\r\n      return;\r\n    }\r\n    if (!this.state.password) {\r\n      return;\r\n    }\r\n    this.setState({\r\n      buttonDisabled: true\r\n    })\r\n    try {\r\n      let res = await fetch(\"/login\", {\r\n        method: \"post\",\r\n        headers: {\r\n          \"Accept\": \"application/json\",\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          username: this.state.username,\r\n          password: this.state.password\r\n        })\r\n      });\r\n      let result = await res.json();\r\n      if (result && result.success) {\r\n        User.isLoggedIn = true;\r\n        User.username = result.username;\r\n        try {\r\n          let res = await fetch(\"./displayData\", {\r\n            method: \"post\",\r\n            headers: {\r\n              \"Accept\": \"application/json\",\r\n              \"Content-Type\": \"application/json\"\r\n            }, body: JSON.stringify({\r\n              username: User.username\r\n            })\r\n          });\r\n          let result = await res.json();\r\n          result = result.array1.arr\r\n          var lengthOf, text, i;\r\n          lengthOf = result.length;\r\n          text = \"<ul>\";\r\n          for (i = 0; i < lengthOf; i++) {\r\n            text += \"<li>\" + \"<center>\" + result[i][0] + \"<center/>\"+\"<br/>\"+ '<center><iframe width=\"420\" height=\"315\" src=\"' +result[i][1] + '\"></iframe><center/>' + \"<p>\"+result[i][2] +\"<p/>\"+  \"</li>\";\r\n          }\r\n          text += \"</ul>\";\r\n          document.getElementById(\"demo\").innerHTML = text;\r\n        }\r\n        catch (e) {\r\n\r\n        }\r\n      }\r\n      else if (result && result.success === false) {\r\n        this.resetForm();\r\n        alert(result.msg);\r\n      }\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n      this.resetForm();\r\n    }\r\n  }\r\n\r\n  async doRegister() {\r\n    try {\r\n      let res = await fetch(\"/register\", {\r\n        method: \"post\",\r\n        headers: {\r\n          \"Accept\": \"application/json\",\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n          username: this.state.username,\r\n          password: this.state.password\r\n        })\r\n      });\r\n      let result = await res.json();\r\n      User.username = result.username\r\n      User.password = result.password\r\n      this.resetForm();\r\n      alert(result.msg);\r\n    }\r\n    catch (e) {\r\n      console.log(e);\r\n      this.resetForm();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"LoginForum\">\r\n        <p style={{ textAlign: \"center\", color: \"white\", fontSize: \"40px\", fontFamily: \"Arial\", fontWeight: \"bold\" }}>Music Catalyst Login</p>\r\n        <InputField type=\"text\" placeholder=\"Username\" value={this.state.username ? this.state.username : \"\"}\r\n          onChange={(val) => this.setInputValue(\"username\", val)} />\r\n        <InputField type=\"password\" placeholder=\"Password\" value={this.state.password ? this.state.password : \"\"}\r\n          onChange={(val) => this.setInputValue(\"password\", val)} />\r\n        <SubmitButton text=\"Login\" disabled={this.state.buttonDisabled} onClick={() => this.doLogin()} />\r\n        <SubmitButton text=\"Register\" disabled={this.state.buttonDisabled} onClick={() => this.doRegister()} />\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForum;\r\n","import React, { useReducer } from 'react';\nimport './App.css';\nimport user from \"./components/User.js\"\nimport LoginForum from \"./LoginForum\"\nimport InputField from \"./components/InputField\"\nimport SubmitButton from \"./components/SubmitButton\"\nimport User from './components/User.js';\nimport { unstable_renderSubtreeIntoContainer } from 'react-dom';\nimport { observer } from \"mobx-react\";\nimport Profile from \"./components/Profile\"\nimport axios from \"axios\";\n\nclass App extends React.Component {\n\n  state = {\n    htmlDisplay:\"\"\n  }\n\n  async componentDidMount() {\n    try {\n      let res = await fetch(\"./isLoggedIn\", {\n        method: \"post\",\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      let result = await res.json();\n      if (result && result.success) {\n        User.loading = false;\n        User.isLoggedIn = true;\n        User.username = result.username;\n        try {\n          let res = await fetch(\"./displayData\", {\n            method: \"post\",\n            headers: {\n              \"Accept\": \"application/json\",\n              \"Content-Type\": \"application/json\"\n            }, body: JSON.stringify({\n              username: User.username\n            })\n          });\n          let result = await res.json();\n          result = result.array1.arr\n          var lengthOf, text, i;\n          lengthOf = result.length;\n          text = \"<ul>\";\n          for (i = 0; i < lengthOf; i++) {\n            text += \"<li>\" + \"<center>\" + result[i][0] + \"<center/>\"+\"<br/>\"+ '<center><iframe width=\"420\" height=\"315\" src=\"' +result[i][1] + '\"></iframe><center/>' + \"<p>\"+result[i][2] +\"<p/>\"+  \"</li>\";\n          }\n          text += \"</ul>\";\n          document.getElementById(\"demo\").innerHTML = text;\n        }\n        catch (e) {\n\n        }\n      }\n      else {\n        User.loading = false;\n        User.isLoggedIn = false;\n      }\n    }\n    catch (e) {\n      User.loading = false;\n      User.isLoggedIn = false;\n    }\n  }\n\n  async doLogout() {\n    try {\n      let res = await fetch(\"./logout\", {\n        method: \"post\",\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      let result = await res.json();\n      if (result && result.success) {\n        User.isLoggedIn = false;\n        User.username = \"\";\n      }\n    }\n    catch (e) {\n      console.log(e)\n    }\n  }\n\n  async doInsert() {\n    try {\n      let res = await fetch(\"./doInsertData1\", {\n        method: \"post\",\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      let result = await res.json();\n    }\n    catch (e) {\n      console.log(e)\n    }\n  }\n\n  async doSubmit() {\n    var inputVal1 = document.getElementById(\"item1\").value;\n    var inputVal2 = document.getElementById(\"item2\").value;\n    var inputVal3 = document.getElementById(\"item3\").value;\n    if (inputVal1 == \"\") {\n      return;\n    }\n    if (inputVal2 == \"\") {\n      return;\n    }\n    if (inputVal3 == \"\") {\n      return;\n    }\n    this.setState({\n      buttonDisabled: true\n    })\n    try {\n      let res = await fetch(\"/doInsertData1\", {\n        method: \"post\",\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: User.username,\n          item1: inputVal1,\n          item2: inputVal2,\n          item3: inputVal3\n        })\n      });\n    }\n    catch (e) {\n      console.log(e);\n      this.resetForm();\n    }\n  }\n\n  async doGet() {\n    try {\n      let res = await fetch(\"./doInsertData1\", {\n        method: \"post\",\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      let result = await res.json();\n    }\n    catch (e) {\n      console.log(e)\n    }\n  }\n\n  async doDisplay() { //test to display variables\n    try {\n      let res = await fetch(\"./displayData\", {\n        method: \"post\",\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }, body: JSON.stringify({\n          username: User.username\n        })\n      });\n      let result = await res.json();\n      document.getElementById(\"demo\").innerHTML = result.arr;\n      document.getElementById(\"demo\").innerHTML = result.arr;\n    }\n    catch (e) {\n      console.log(e)\n    }\n  }\n\n  async doClear() { //clears entire arr list\n    document.getElementById(\"demo\").innerHTML = \" \";\n    try {\n      let res = await fetch(\"./doClear\", {\n        method: \"post\",\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\": \"application/json\"\n        }, body: JSON.stringify({\n          username: User.username\n        })\n      });\n      let result = await res.json();\n      alert(\"hi2\");\n    }\n    catch (e) {\n      console.log(e)\n    }\n  }\n\n\n  openForm() {\n    document.getElementById(\"myForm\").style.display = \"block\";\n  }\n\n  closeForm() {\n    document.getElementById(\"myForm\").style.display = \"none\";\n  }\n\n\n  render() {\n\n    if (User.loading) {\n      return (\n        <div className=\"app\">\n          <div className=\"container\">\n            Loading..\n            </div>\n        </div>\n      );\n    }\n    else {\n      if (User.isLoggedIn) {\n        return (\n          <div className=\"app\">\n            <div className=\"Welcome\" style={{display:\"block\",fontStyle:\"bold\"}}>\n            &nbsp;&nbsp;&nbsp;Welcome, {User.username}\n            </div>\n            <div className=\"logoutButton\">\n              <SubmitButton text={\"Log out\"} disabled={false} onClick={() => this.doLogout()} />\n            </div>\n            <div class=\"clearButton\">\n            <SubmitButton text={\"Clear List\"} disabled={false} onClick={() => this.doClear()} />\n            </div>\n            <div className=\"button3\">\n            <SubmitButton text={\"Insert New Song\"} disabled={false} onClick={() => this.openForm()} />\n            </div>\n            <img src={require('./components/images/musicCatalystLogo.png')} alt=\"Music Catalyst\" class=\"center\"/>\n            {this.state.htmlDisplay}\n            <nav> <p id=\"demo\"></p>\n            <p id=\"blank\"></p></nav>\n            <div class=\"form-popup\" id=\"myForm\">\n              <form class=\"form-container\">\n                <input type=\"text\" placeholder=\"Title\" id=\"item1\" required></input>\n                <input type=\"text\" placeholder=\"Youtube Embeded Link\" id=\"item2\" required></input>\n                <input type=\"text\" placeholder=\"Lyrics\" id=\"item3\" required></input>\n                <button type=\"submit\" class=\"btn\" onClick={() => this.doSubmit()}>Add Song</button>\n                <button type=\"button\" class=\"btn cancel\" onClick={() => this.closeForm()}>Close</button>\n              </form>\n            </div>\n          </div>\n        );\n      }\n\n      return (\n        <div className=\"app\">\n          <LoginForum />\n        </div>\n\n      );\n    }\n  }\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}